xs=[1, 0.471641, -0.594208, 0.578483, -0.0706598, -0.476659, -0.166945; 1, -0.484927, -0.518082, 0.504432, -0.0913094, -0.485962, 0.0308606; 1, -0.245785, -0.518082, 0.387326, -0.0906089, -0.49192, -0.0234015; 1, -0.00664283, -0.518082, 0.487209, -0.0910397, -0.520253, -0.146758; 1, 0.232499, -0.518082, 0.721421, -0.0727367, -0.509377, -0.137824; 1, 0.471641, -0.518082, 0.652534, -0.0184777, -0.456329, -0.23374; 1, -0.484927, -0.441955, 0.550929, -0.0145694, -0.450566, -0.238633; 1, -0.245785, -0.441955, 0.509599, -0.0041324, -0.450013, -0.0432039; 1, -0.00664283, -0.441955, 0.440712, -0.00479352, -0.476705, -0.136573; 1, 0.232499, -0.441955, 0.35805, -0.0887857, -0.480265, -0.0857304; 1, 0.471641, -0.441955, 0.488932, -0.092128, -0.473522, -0.0360603; 1, -0.245785, -0.365829, 0.514764, -0.209859, -0.453851, -0.028212; 1, -0.00664283, -0.365829, 0.433823, -0.209573, -0.478299, 0.0208895; 1, 0.232499, -0.365829, 0.642203, -0.210005, -0.471624, -0.0326509; 1, 0.471641, -0.365829, 0.650812, -0.145161, -0.418262, -0.195578; 1, -0.484927, -0.289703, 0.621536, -0.147197, -0.418057, 0.0788251; 1, -0.245785, -0.289703, -0.12759, -0.14841, -0.417494, 2.20891; 1, -0.00664283, -0.289703, -0.380742, 0.424217, 0.121065, 0.784965; 1, 0.232499, -0.289703, -0.239529, 0.464129, 0.172669, 0.433055; 1, 0.471641, -0.289703, -0.516791, 0.493951, 0.199619, 0.675596; 1, -0.484927, -0.213576, -0.365244, 0.534815, 0.260723, 0.210477; 1, -0.245785, -0.213576, -0.310136, 0.570633, 0.288394, 0.239574; 1, -0.00664283, -0.213576, -0.268804, 0.574491, 0.285889, 0.0635069; 1, 0.232499, -0.213576, -0.163754, 0.565862, 0.282794, -0.0217144; 1, 0.471641, -0.213576, -0.170643, 0.53028, 0.295157, -0.0593328; 1, -0.484927, -0.13745, -0.179254, 0.531047, 0.295245, -0.108626; 1, -0.245785, -0.13745, -0.137923, 0.529432, 0.292068, -0.137395; 1, -0.00664283, -0.13745, -0.175809, 0.534314, 0.294518, 0.00712051; 1, 0.232499, -0.13745, -0.0535387, 0.533505, 0.27688, -0.0768746; 1, 0.471641, -0.13745, 0.0807876, 0.549639, 0.294514, 0.0408013; 1, -0.245785, -0.0613239, 0.0842564, 0.55209, 0.31205, -0.0696941; 1, -0.00664283, -0.0613239, 0.0755845, 0.550925, 0.297491, -0.180438; 1, 0.232499, -0.0613239, 0.0703813, 0.548511, 0.295505, -0.172168; 1, 0.471641, -0.0613239, 0.132819, 0.510183, 0.28739, -0.136548; 1, -0.484927, 0.0148023, 0.183116, 0.515673, 0.292018, -0.0894898; 1, -0.245785, 0.0148023, 0.17271, 0.520057, 0.286549, -0.211388; 1, -0.00664283, 0.0148023, 0.155366, -0.023265, 0.284272, -0.135897; 1, 0.232499, 0.0148023, 0.167507, -0.146734, 0.283751, -0.149395; 1, 0.471641, 0.0148023, 0.131085, -0.172605, 0.282962, -0.0678102; 1, -0.484927, 0.0909286, 0.136288, -0.38926, 0.233617, -0.0994944; 1, -0.245785, 0.0909286, 0.0322249, -0.43895, 0.224928, -0.102445; 1, -0.00664283, 0.0909286, -0.00593157, -0.394288, 0.154681, -0.203364; 1, 0.232499, 0.0909286, 0.00274035, -0.387894, 0.154048, -0.246343; 1, 0.471641, 0.0909286, -0.127338, -0.415433, 0.150691, -0.0267504; 1, -0.484927, 0.167055, -0.0423536, -0.362653, 0.155129, -0.0963995; 1, -0.245785, 0.167055, -0.184573, -0.346017, 0.164214, 0.0222116; 1, -0.00664283, 0.167055, -0.193245, -0.297957, 0.178346, -0.0945947; 1, 0.232499, 0.167055, -0.359746, -0.300967, 0.176226, 0.372624; 1, 0.471641, 0.167055, -0.297308, -0.280159, 0.195499, 0.339239; 1, -0.484927, 0.243181, -0.266089, -0.317261, 0.196965, -0.0431551; 1, -0.245785, 0.243181, -0.241808, -0.312129, 0.195173, -0.10371; 1, -0.00664283, 0.243181, -0.103057, -0.308013, 0.194154, 0.106903; 1, 0.232499, 0.243181, -0.139479, -0.255211, 0.206892, -0.0666092; 1, 0.471641, 0.243181, -0.0371505, -0.265199, 0.197526, 0.572986; 1, -0.484927, 0.319307, -0.0406193, -0.244971, 0.161904, -0.194998; 1, -0.245785, 0.319307, -0.0336817, -0.244849, 0.159823, -0.207324; 1, -0.00664283, 0.319307, -0.283433, -0.244311, 0.154086, 0.0947101; 1, 0.232499, 0.319307, -0.326793, -0.140582, 0.206312, -0.00577891; 1, 0.471641, 0.319307, -0.368418, -0.140057, 0.204941, -0.057824; 1, -0.484927, 0.395434, -0.370152, -0.141123, 0.202086, -0.0469195; 1, -0.245785, 0.395434, -0.422184, -0.150829, 0.18465, -0.0496528; 1, -0.00664283, 0.395434, -0.411777, -0.149411, 0.184242, -0.0163807; 1, 0.232499, 0.395434, -0.486356, -0.149149, 0.181972, -0.00591516; 1, -0.484927, 0.47156, -0.267824, -0.164364, 0.143143, 0.0232881; 1, -0.245785, 0.47156, -0.271292, -0.0815533, 0.199605, -0.151883; 1, -0.00664283, 0.47156, -0.290371, -0.110806, 0.199721, -0.220105; 1, 0.232499, 0.47156, -0.279964, -0.110475, -0.335964, -0.203781; 1, 0.471641, 0.47156, -0.238339, -0.160332, -0.425045, -0.165127; 1, -0.484927, 0.547686, -0.231402, -0.164268, -0.451888, -0.127202; 1, -0.245785, 0.547686, -0.25048, -0.16581, -0.579147, -0.228667; 1, -0.00664283, 0.547686, -0.144682, -0.166128, -0.616967, -0.180253; 1, 0.232499, 0.547686, -0.162026, -0.181295, -0.603929, -0.259788];
rs=[-0.00919586, -0.0146774, 0.0127053, 0.0294184, -0.00840526, -0.0125026, -0.00515013, -0.00862827, -0.0104439, 0.0167107, 0.00324394, -0.0101315, 0.0263504, 0.00106075, -0.00360325, -0.0925335, -0.0344585, 0.0199076, -0.0383241, 0.0217821, 0.00775197, 0.00576937, 0.0145794, -0.000942348, -0.00117905, 0.00566563, -0.00516419, 0.0167531, 0.0181017, 0.00757576, -0.00114732, -0.00068918, 0.00827586, 0.00661195, -0.001359, -0.00226809, 0.00159127, -0.00476623, 0.000684151, -0.0136737, -0.00508318, 0.00116117, -0.0173974, 0.0115675, -0.0191365, -0.00118963, -0.022868, 0.00877621, 0.00434993, 0.00336862, 0.0191847, -0.00494118, 0.0139513, -0.000466418, 0.000933271, -0.0335664, -0.00602991, -0.00582383, -0.000244081, -0.00732422, 0.00147565, -0.0105599, 0.0312733, -0.000481348, -0.00264869, 0.00144858, 0.00578592, 0.000958773, -0.0026341, 0.0146459, -0.0023663, -0.0128083];

%xs = xs(:,2);

b1 = 0.2;
b2 = 1;

Rf = log(1.02)/365;
rc = log(1.15)/365;

[n p] = size(xs);

%U1 = @(p) -b1*max(p - rc,0) + b2*max(rc-p,0);
U2 = @(p) b1*(p-rc) + min(0, (b2-b1)*(p-rc));

cvx_begin
    variable q(p)
    
    %maximize( sum( max((rs-1)'.*(xs*q),0) + 2*max((1-rs)'.*(xs*q),0) ) )
    maximize(sum(U2(rs'.*(xs*q) + Rf*(1-xs*q))) - 0.2*norm(q,2))
%     subject to
%         norm(q,2) <= 1
cvx_end


% cvx_begin
%     variable mus(n)
%     variable lambdas(n)
%     variable q(p)
%     
%     maximize( ones(1,n)*mus -2*ones(1,n)*lambdas )
%     subject to
%         for i=1:n
%             lambdas(i) >= (rs(i) - 1)*(q*xs(i,:))
%             mus(i) >= (1-rs(i))*(q*xs(i,:))
%             lambdas(i) >= 0
%             mus(i) >= 0
%             norm(q,2)<=1
%         end
% cvx_end